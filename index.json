{
  "api/Supabase.Storage.Bucket.html": {
    "href": "api/Supabase.Storage.Bucket.html",
    "title": "Class Bucket | storage-csharp",
    "keywords": "Class Bucket Namespace Supabase.Storage Assembly Supabase.Storage.dll public class Bucket Inheritance object Bucket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedMimes Specifies the allowed mime types that this bucket can accept during upload. Expects a List of values such as: ['image/jpeg', 'image/png', etc] [JsonProperty(\"allowed_mime_types\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? AllowedMimes { get; set; } Property Value List<string> CreatedAt [JsonProperty(\"created_at\")] public DateTime? CreatedAt { get; set; } Property Value DateTime? FileSizeLimit Specifies the file size limit that this bucket can accept during upload. Expects a string value following a format like: '1kb', '50mb', '150kb', etc. [JsonProperty(\"file_size_limit\", NullValueHandling = NullValueHandling.Include)] public string? FileSizeLimit { get; set; } Property Value string Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string Name [JsonProperty(\"name\")] public string? Name { get; set; } Property Value string Owner [JsonProperty(\"owner\")] public string? Owner { get; set; } Property Value string Public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private. [JsonProperty(\"public\")] public bool Public { get; set; } Property Value bool UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime?"
  },
  "api/Supabase.Storage.BucketUpsertOptions.html": {
    "href": "api/Supabase.Storage.BucketUpsertOptions.html",
    "title": "Class BucketUpsertOptions | storage-csharp",
    "keywords": "Class BucketUpsertOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class BucketUpsertOptions Inheritance object BucketUpsertOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedMimes Specifies the allowed mime types that this bucket can accept during upload. Expects a List of values such as: ['image/jpeg', 'image/png', etc] [JsonProperty(\"allowed_mime_types\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? AllowedMimes { get; set; } Property Value List<string> FileSizeLimit Specifies the file size limit that this bucket can accept during upload. Expects a string value following a format like: '1kb', '50mb', '150kb', etc. [JsonProperty(\"file_size_limit\", NullValueHandling = NullValueHandling.Include)] public string? FileSizeLimit { get; set; } Property Value string Public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private. [JsonProperty(\"public\")] public bool Public { get; set; } Property Value bool"
  },
  "api/Supabase.Storage.Client.html": {
    "href": "api/Supabase.Storage.Client.html",
    "title": "Class Client | storage-csharp",
    "keywords": "Class Client Namespace Supabase.Storage Assembly Supabase.Storage.dll public class Client : StorageBucketApi, IStorageClient<Bucket, FileObject>, IStorageBucketApi<Bucket>, IGettableHeaders Inheritance object StorageBucketApi Client Implements IStorageClient<Bucket, FileObject> IStorageBucketApi<Bucket> IGettableHeaders Inherited Members StorageBucketApi.Options StorageBucketApi.Url StorageBucketApi.Headers StorageBucketApi.GetHeaders StorageBucketApi.ListBuckets() StorageBucketApi.GetBucket(string) StorageBucketApi.CreateBucket(string, BucketUpsertOptions) StorageBucketApi.UpdateBucket(string, BucketUpsertOptions) StorageBucketApi.EmptyBucket(string) StorageBucketApi.DeleteBucket(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(string, ClientOptions?, Dictionary<string, string>?) public Client(string url, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string options ClientOptions headers Dictionary<string, string> Client(string, Dictionary<string, string>?) public Client(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Methods From(string) Perform a file operation in a bucket public IStorageFileApi<FileObject> From(string id) Parameters id string Bucket Id Returns IStorageFileApi<FileObject>"
  },
  "api/Supabase.Storage.ClientOptions.html": {
    "href": "api/Supabase.Storage.ClientOptions.html",
    "title": "Class ClientOptions | storage-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll Options that can be passed into the Storage Client public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields HttpDownloadTimeout The timespan to wait before an HTTP Upload Timesout See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpDownloadTimeout Field Value TimeSpan HttpRequestTimeout The timespan to wait before an HTTP Client request times out. See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpRequestTimeout Field Value TimeSpan HttpUploadTimeout The timespan to wait before an HTTP Upload Timesout See: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=net-7.0 public TimeSpan HttpUploadTimeout Field Value TimeSpan"
  },
  "api/Supabase.Storage.CreateSignedUrlResponse.html": {
    "href": "api/Supabase.Storage.CreateSignedUrlResponse.html",
    "title": "Class CreateSignedUrlResponse | storage-csharp",
    "keywords": "Class CreateSignedUrlResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class CreateSignedUrlResponse Inheritance object CreateSignedUrlResponse Derived CreateSignedUrlsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SignedUrl [JsonProperty(\"signedURL\")] public string? SignedUrl { get; set; } Property Value string"
  },
  "api/Supabase.Storage.CreateSignedUrlsResponse.html": {
    "href": "api/Supabase.Storage.CreateSignedUrlsResponse.html",
    "title": "Class CreateSignedUrlsResponse | storage-csharp",
    "keywords": "Class CreateSignedUrlsResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class CreateSignedUrlsResponse : CreateSignedUrlResponse Inheritance object CreateSignedUrlResponse CreateSignedUrlsResponse Inherited Members CreateSignedUrlResponse.SignedUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Path [JsonProperty(\"path\")] public string? Path { get; set; } Property Value string"
  },
  "api/Supabase.Storage.ErrorResponse.html": {
    "href": "api/Supabase.Storage.ErrorResponse.html",
    "title": "Class ErrorResponse | storage-csharp",
    "keywords": "Class ErrorResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class ErrorResponse Inheritance object ErrorResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string StatusCode [JsonProperty(\"statusCode\")] public int StatusCode { get; set; } Property Value int"
  },
  "api/Supabase.Storage.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Storage.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | storage-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public enum FailureHint.Reason Fields AlreadyExists = 4 Internal = 2 InvalidInput = 5 NotAuthorized = 1 NotFound = 3 Unknown = 0"
  },
  "api/Supabase.Storage.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Storage.Exceptions.FailureHint.html",
    "title": "Class FailureHint | storage-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(SupabaseStorageException) public static FailureHint.Reason DetectReason(SupabaseStorageException storageException) Parameters storageException SupabaseStorageException Returns FailureHint.Reason"
  },
  "api/Supabase.Storage.Exceptions.SupabaseStorageException.html": {
    "href": "api/Supabase.Storage.Exceptions.SupabaseStorageException.html",
    "title": "Class SupabaseStorageException | storage-csharp",
    "keywords": "Class SupabaseStorageException Namespace Supabase.Storage.Exceptions Assembly Supabase.Storage.dll public class SupabaseStorageException : Exception, ISerializable Inheritance object Exception SupabaseStorageException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SupabaseStorageException(string?) public SupabaseStorageException(string? message) Parameters message string SupabaseStorageException(string?, Exception?) public SupabaseStorageException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Content public string? Content { get; } Property Value string Reason public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode public int StatusCode { get; } Property Value int Methods AddReason() public void AddReason()"
  },
  "api/Supabase.Storage.Exceptions.html": {
    "href": "api/Supabase.Storage.Exceptions.html",
    "title": "Namespace Supabase.Storage.Exceptions | storage-csharp",
    "keywords": "Namespace Supabase.Storage.Exceptions Classes FailureHint SupabaseStorageException Enums FailureHint.Reason"
  },
  "api/Supabase.Storage.Extensions.TransformOptionsExtension.html": {
    "href": "api/Supabase.Storage.Extensions.TransformOptionsExtension.html",
    "title": "Class TransformOptionsExtension | storage-csharp",
    "keywords": "Class TransformOptionsExtension Namespace Supabase.Storage.Extensions Assembly Supabase.Storage.dll public static class TransformOptionsExtension Inheritance object TransformOptionsExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToQueryCollection(TransformOptions) Transforms options into a NameValueCollecto to be used with a UriBuilder public static NameValueCollection ToQueryCollection(this TransformOptions transform) Parameters transform TransformOptions Returns NameValueCollection"
  },
  "api/Supabase.Storage.Extensions.html": {
    "href": "api/Supabase.Storage.Extensions.html",
    "title": "Namespace Supabase.Storage.Extensions | storage-csharp",
    "keywords": "Namespace Supabase.Storage.Extensions Classes TransformOptionsExtension"
  },
  "api/Supabase.Storage.FileObject.html": {
    "href": "api/Supabase.Storage.FileObject.html",
    "title": "Class FileObject | storage-csharp",
    "keywords": "Class FileObject Namespace Supabase.Storage Assembly Supabase.Storage.dll public class FileObject Inheritance object FileObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MetaData [JsonProperty(\"metadata\")] public Dictionary<string, object> MetaData Field Value Dictionary<string, object> Properties BucketId [JsonProperty(\"bucket_id\")] public string? BucketId { get; set; } Property Value string Buckets [JsonProperty(\"buckets\")] public Bucket? Buckets { get; set; } Property Value Bucket CreatedAt [JsonProperty(\"created_at\")] public DateTime? CreatedAt { get; set; } Property Value DateTime? Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string IsFolder Flag representing if this object is a folder, all properties will be null but the name public bool IsFolder { get; } Property Value bool LastAccessedAt [JsonProperty(\"last_accessed_at\")] public DateTime? LastAccessedAt { get; set; } Property Value DateTime? Name [JsonProperty(\"name\")] public string? Name { get; set; } Property Value string Owner [JsonProperty(\"owner\")] public string? Owner { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime?"
  },
  "api/Supabase.Storage.FileOptions.html": {
    "href": "api/Supabase.Storage.FileOptions.html",
    "title": "Class FileOptions | storage-csharp",
    "keywords": "Class FileOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class FileOptions Inheritance object FileOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CacheControl [JsonProperty(\"cacheControl\")] public string CacheControl { get; set; } Property Value string ContentType [JsonProperty(\"contentType\")] public string ContentType { get; set; } Property Value string Upsert [JsonProperty(\"upsert\")] public bool Upsert { get; set; } Property Value bool"
  },
  "api/Supabase.Storage.GenericResponse.html": {
    "href": "api/Supabase.Storage.GenericResponse.html",
    "title": "Class GenericResponse | storage-csharp",
    "keywords": "Class GenericResponse Namespace Supabase.Storage Assembly Supabase.Storage.dll public class GenericResponse Inheritance object GenericResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string"
  },
  "api/Supabase.Storage.Interfaces.IStorageBucketApi-1.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageBucketApi-1.html",
    "title": "Interface IStorageBucketApi<TBucket> | storage-csharp",
    "keywords": "Interface IStorageBucketApi<TBucket> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageBucketApi<TBucket> : IGettableHeaders where TBucket : Bucket Type Parameters TBucket Inherited Members IGettableHeaders.GetHeaders Properties Headers Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options ClientOptions Options { get; } Property Value ClientOptions Methods CreateBucket(string, BucketUpsertOptions?) Task<string> CreateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<string> DeleteBucket(string) Task<GenericResponse?> DeleteBucket(string id) Parameters id string Returns Task<GenericResponse> EmptyBucket(string) Task<GenericResponse?> EmptyBucket(string id) Parameters id string Returns Task<GenericResponse> GetBucket(string) Task<TBucket?> GetBucket(string id) Parameters id string Returns Task<TBucket> ListBuckets() Task<List<TBucket>?> ListBuckets() Returns Task<List<TBucket>> UpdateBucket(string, BucketUpsertOptions?) Task<TBucket?> UpdateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<TBucket>"
  },
  "api/Supabase.Storage.Interfaces.IStorageClient-2.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageClient-2.html",
    "title": "Interface IStorageClient<TBucket, TFileObject> | storage-csharp",
    "keywords": "Interface IStorageClient<TBucket, TFileObject> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageClient<TBucket, TFileObject> : IStorageBucketApi<TBucket>, IGettableHeaders where TBucket : Bucket where TFileObject : FileObject Type Parameters TBucket TFileObject Inherited Members IStorageBucketApi<TBucket>.Options IStorageBucketApi<TBucket>.Headers IStorageBucketApi<TBucket>.CreateBucket(string, BucketUpsertOptions) IStorageBucketApi<TBucket>.DeleteBucket(string) IStorageBucketApi<TBucket>.EmptyBucket(string) IStorageBucketApi<TBucket>.GetBucket(string) IStorageBucketApi<TBucket>.ListBuckets() IStorageBucketApi<TBucket>.UpdateBucket(string, BucketUpsertOptions) IGettableHeaders.GetHeaders Methods From(string) IStorageFileApi<TFileObject> From(string id) Parameters id string Returns IStorageFileApi<TFileObject>"
  },
  "api/Supabase.Storage.Interfaces.IStorageFileApi-1.html": {
    "href": "api/Supabase.Storage.Interfaces.IStorageFileApi-1.html",
    "title": "Interface IStorageFileApi<TFileObject> | storage-csharp",
    "keywords": "Interface IStorageFileApi<TFileObject> Namespace Supabase.Storage.Interfaces Assembly Supabase.Storage.dll public interface IStorageFileApi<TFileObject> where TFileObject : FileObject Type Parameters TFileObject Properties Options ClientOptions Options { get; } Property Value ClientOptions Methods CreateSignedUrl(string, int, TransformOptions?) Task<string> CreateSignedUrl(string path, int expiresIn, TransformOptions? transformOptions = null) Parameters path string expiresIn int transformOptions TransformOptions Returns Task<string> CreateSignedUrls(List<string>, int) Task<List<CreateSignedUrlsResponse>?> CreateSignedUrls(List<string> paths, int expiresIn) Parameters paths List<string> expiresIn int Returns Task<List<CreateSignedUrlsResponse>> CreateUploadSignedUrl(string) Task<UploadSignedUrl> CreateUploadSignedUrl(string supabasePath) Parameters supabasePath string Returns Task<UploadSignedUrl> Download(string, TransformOptions?, EventHandler<float>?) Task<byte[]> Download(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> Download(string, EventHandler<float>?) Task<byte[]> Download(string supabasePath, EventHandler<float>? onProgress = null) Parameters supabasePath string onProgress EventHandler<float> Returns Task<byte[]> Download(string, string, TransformOptions?, EventHandler<float>?) Task<string> Download(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> Download(string, string, EventHandler<float>?) Task<string> Download(string supabasePath, string localPath, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string onProgress EventHandler<float> Returns Task<string> DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) Task<byte[]> DownloadPublicFile(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) Task<string> DownloadPublicFile(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> GetPublicUrl(string, TransformOptions?) string GetPublicUrl(string path, TransformOptions? transformOptions = null) Parameters path string transformOptions TransformOptions Returns string List(string, SearchOptions?) Task<List<TFileObject>?> List(string path = \"\", SearchOptions? options = null) Parameters path string options SearchOptions Returns Task<List<TFileObject>> Move(string, string) Task<bool> Move(string fromPath, string toPath) Parameters fromPath string toPath string Returns Task<bool> Remove(List<string>) Task<List<TFileObject>?> Remove(List<string> paths) Parameters paths List<string> Returns Task<List<TFileObject>> Remove(string) Task<TFileObject?> Remove(string path) Parameters path string Returns Task<TFileObject> Update(byte[], string, FileOptions?, EventHandler<float>?) Task<string> Update(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters data byte[] supabasePath string options FileOptions onProgress EventHandler<float> Returns Task<string> Update(string, string, FileOptions?, EventHandler<float>?) Task<string> Update(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters localFilePath string supabasePath string options FileOptions onProgress EventHandler<float> Returns Task<string> Upload(byte[], string, FileOptions?, EventHandler<float>?, bool) Task<string> Upload(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] supabasePath string options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> Upload(string, string, FileOptions?, EventHandler<float>?, bool) Task<string> Upload(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string supabasePath string options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(byte[], UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Task<string> UploadToSignedUrl(byte[] data, UploadSignedUrl url, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] url UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(string, UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Task<string> UploadToSignedUrl(string localFilePath, UploadSignedUrl url, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string url UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string>"
  },
  "api/Supabase.Storage.Interfaces.html": {
    "href": "api/Supabase.Storage.Interfaces.html",
    "title": "Namespace Supabase.Storage.Interfaces | storage-csharp",
    "keywords": "Namespace Supabase.Storage.Interfaces Interfaces IStorageBucketApi<TBucket> IStorageClient<TBucket, TFileObject> IStorageFileApi<TFileObject>"
  },
  "api/Supabase.Storage.SearchOptions.html": {
    "href": "api/Supabase.Storage.SearchOptions.html",
    "title": "Class SearchOptions | storage-csharp",
    "keywords": "Class SearchOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class SearchOptions Inheritance object SearchOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Limit Number of files to be returned [JsonProperty(\"limit\")] public int Limit { get; set; } Property Value int Offset Starting position of query [JsonProperty(\"offset\")] public int Offset { get; set; } Property Value int Search The search string to filter files by [JsonProperty(\"search\")] public string Search { get; set; } Property Value string SortBy Column to sort by. Can be any colum inside of a FileObject [JsonProperty(\"sortBy\")] public SortBy SortBy { get; set; } Property Value SortBy"
  },
  "api/Supabase.Storage.SortBy.html": {
    "href": "api/Supabase.Storage.SortBy.html",
    "title": "Class SortBy | storage-csharp",
    "keywords": "Class SortBy Namespace Supabase.Storage Assembly Supabase.Storage.dll public class SortBy Inheritance object SortBy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Column [JsonProperty(\"column\")] public string? Column { get; set; } Property Value string Order [JsonProperty(\"order\")] public string? Order { get; set; } Property Value string"
  },
  "api/Supabase.Storage.StorageBucketApi.html": {
    "href": "api/Supabase.Storage.StorageBucketApi.html",
    "title": "Class StorageBucketApi | storage-csharp",
    "keywords": "Class StorageBucketApi Namespace Supabase.Storage Assembly Supabase.Storage.dll public class StorageBucketApi : IStorageBucketApi<Bucket>, IGettableHeaders Inheritance object StorageBucketApi Implements IStorageBucketApi<Bucket> IGettableHeaders Derived Client Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StorageBucketApi(string, ClientOptions?, Dictionary<string, string>?) protected StorageBucketApi(string url, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string options ClientOptions headers Dictionary<string, string> StorageBucketApi(string, Dictionary<string, string>?) protected StorageBucketApi(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Properties GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor will ALWAYS take precendece over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Headers public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options public ClientOptions Options { get; protected set; } Property Value ClientOptions Url protected string Url { get; set; } Property Value string Methods CreateBucket(string, BucketUpsertOptions?) Creates a new Storage bucket public Task<string> CreateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<string> Bucket Id DeleteBucket(string) Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first EmptyBucket(string) public Task<GenericResponse?> DeleteBucket(string id) Parameters id string Returns Task<GenericResponse> EmptyBucket(string) Removes all objects inside a single bucket. public Task<GenericResponse?> EmptyBucket(string id) Parameters id string Returns Task<GenericResponse> GetBucket(string) Retrieves the details of an existing Storage bucket. public Task<Bucket?> GetBucket(string id) Parameters id string Returns Task<Bucket> ListBuckets() Retrieves the details of all Storage buckets within an existing product. public Task<List<Bucket>?> ListBuckets() Returns Task<List<Bucket>> UpdateBucket(string, BucketUpsertOptions?) Updates a Storage bucket public Task<Bucket?> UpdateBucket(string id, BucketUpsertOptions? options = null) Parameters id string options BucketUpsertOptions Returns Task<Bucket>"
  },
  "api/Supabase.Storage.StorageFileApi.html": {
    "href": "api/Supabase.Storage.StorageFileApi.html",
    "title": "Class StorageFileApi | storage-csharp",
    "keywords": "Class StorageFileApi Namespace Supabase.Storage Assembly Supabase.Storage.dll public class StorageFileApi : IStorageFileApi<FileObject> Inheritance object StorageFileApi Implements IStorageFileApi<FileObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StorageFileApi(string, Dictionary<string, string>?, string?) public StorageFileApi(string url, Dictionary<string, string>? headers = null, string? bucketId = null) Parameters url string headers Dictionary<string, string> bucketId string StorageFileApi(string, string, ClientOptions?, Dictionary<string, string>?) public StorageFileApi(string url, string bucketId, ClientOptions? options, Dictionary<string, string>? headers = null) Parameters url string bucketId string options ClientOptions headers Dictionary<string, string> Properties BucketId protected string? BucketId { get; set; } Property Value string Headers protected Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Options public ClientOptions Options { get; protected set; } Property Value ClientOptions Url protected string Url { get; set; } Property Value string Methods CreateSignedUrl(string, int, TransformOptions?) Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds. public Task<string> CreateSignedUrl(string path, int expiresIn, TransformOptions? transformOptions = null) Parameters path string The file path to be downloaded, including the current file name. For example folder/image.png. expiresIn int The number of seconds until the signed URL expires. For example, 60 for a URL which is valid for one minute. transformOptions TransformOptions Returns Task<string> CreateSignedUrls(List<string>, int) Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds. public Task<List<CreateSignedUrlsResponse>?> CreateSignedUrls(List<string> paths, int expiresIn) Parameters paths List<string> paths The file paths to be downloaded, including the current file names. For example [folder/image.png, 'folder2/image2.png']. expiresIn int The number of seconds until the signed URLs expire. For example, 60 for URLs which are valid for one minute. Returns Task<List<CreateSignedUrlsResponse>> CreateUploadSignedUrl(string) Creates an upload signed URL. Use it to upload a file straight to the bucket without credentials public Task<UploadSignedUrl> CreateUploadSignedUrl(string supabasePath) Parameters supabasePath string The file path, including the current file name. For example folder/image.png. Returns Task<UploadSignedUrl> Download(string, TransformOptions?, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. For public buckets DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) public Task<byte[]> Download(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> Download(string, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. For public buckets DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) public Task<byte[]> Download(string supabasePath, EventHandler<float>? onProgress = null) Parameters supabasePath string onProgress EventHandler<float> Returns Task<byte[]> Download(string, string, TransformOptions?, EventHandler<float>?) Downloads a file from a private bucket. For public buckets, use DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) public Task<string> Download(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> Download(string, string, EventHandler<float>?) Downloads a file from a private bucket. For public buckets, use DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) public Task<string> Download(string supabasePath, string localPath, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string onProgress EventHandler<float> Returns Task<string> DownloadPublicFile(string, TransformOptions?, EventHandler<float>?) Downloads a byte array from a private bucket to be used programmatically. This method DOES NOT VERIFY that the file is actually public. public Task<byte[]> DownloadPublicFile(string supabasePath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<byte[]> DownloadPublicFile(string, string, TransformOptions?, EventHandler<float>?) Downloads a public file to the filesystem. This method DOES NOT VERIFY that the file is actually public. public Task<string> DownloadPublicFile(string supabasePath, string localPath, TransformOptions? transformOptions = null, EventHandler<float>? onProgress = null) Parameters supabasePath string localPath string transformOptions TransformOptions onProgress EventHandler<float> Returns Task<string> GetPublicUrl(string, TransformOptions?) A simple convenience function to get the URL for an asset in a public bucket.If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset. public string GetPublicUrl(string path, TransformOptions? transformOptions) Parameters path string transformOptions TransformOptions Returns string List(string, SearchOptions?) Lists all the files within a bucket. public Task<List<FileObject>?> List(string path = \"\", SearchOptions? options = null) Parameters path string options SearchOptions Returns Task<List<FileObject>> Move(string, string) Moves an existing file, optionally renaming it at the same time. public Task<bool> Move(string fromPath, string toPath) Parameters fromPath string The original file path, including the current file name. For example folder/image.png. toPath string The new file path, including the new file name. For example folder/image-copy.png. Returns Task<bool> Remove(List<string>) Deletes files within the same bucket public Task<List<FileObject>?> Remove(List<string> paths) Parameters paths List<string> An array of files to be deletes, including the path and file name. For example [folder/image.png]. Returns Task<List<FileObject>> Remove(string) Deletes file within the same bucket public Task<FileObject?> Remove(string path) Parameters path string A path to delete, for example folder/image.png. Returns Task<FileObject> Update(byte[], string, FileOptions?, EventHandler<float>?) Replaces an existing file at the specified path with a new one. public Task<string> Update(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters data byte[] supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions HTTP headers. onProgress EventHandler<float> Returns Task<string> Update(string, string, FileOptions?, EventHandler<float>?) Replaces an existing file at the specified path with a new one. public Task<string> Update(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null) Parameters localFilePath string File source path. supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions HTTP headers. onProgress EventHandler<float> Returns Task<string> Upload(byte[], string, FileOptions?, EventHandler<float>?, bool) Uploads a byte array to an existing bucket. public Task<string> Upload(byte[] data, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> Upload(string, string, FileOptions?, EventHandler<float>?, bool) Uploads a file to an existing bucket. public Task<string> Upload(string localFilePath, string supabasePath, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string File Source Path supabasePath string The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload. options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(byte[], UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Uploads a byte array using a pre-generated Signed Upload Url public Task<string> UploadToSignedUrl(byte[] data, UploadSignedUrl signedUrl, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters data byte[] signedUrl UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string> UploadToSignedUrl(string, UploadSignedUrl, FileOptions?, EventHandler<float>?, bool) Uploads a file to using a pre-generated Signed Upload Url public Task<string> UploadToSignedUrl(string localFilePath, UploadSignedUrl signedUrl, FileOptions? options = null, EventHandler<float>? onProgress = null, bool inferContentType = true) Parameters localFilePath string File Source Path signedUrl UploadSignedUrl options FileOptions onProgress EventHandler<float> inferContentType bool Returns Task<string>"
  },
  "api/Supabase.Storage.TransformOptions.ResizeType.html": {
    "href": "api/Supabase.Storage.TransformOptions.ResizeType.html",
    "title": "Enum TransformOptions.ResizeType | storage-csharp",
    "keywords": "Enum TransformOptions.ResizeType Namespace Supabase.Storage Assembly Supabase.Storage.dll The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit. public enum TransformOptions.ResizeType Fields [MapTo(\"contain\", null)] Contain = 1 [MapTo(\"cover\", null)] Cover = 0 [MapTo(\"fill\", null)] Fill = 2"
  },
  "api/Supabase.Storage.TransformOptions.html": {
    "href": "api/Supabase.Storage.TransformOptions.html",
    "title": "Class TransformOptions | storage-csharp",
    "keywords": "Class TransformOptions Namespace Supabase.Storage Assembly Supabase.Storage.dll public class TransformOptions Inheritance object TransformOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TransformOptionsExtension.ToQueryCollection(TransformOptions) Properties Format Specify the format of the image requested. When using 'origin' we force the format to be the same as the original image, bypassing automatic browser optimisation such as webp conversion [JsonProperty(\"format\")] public string Format { get; set; } Property Value string Height The height of the image in pixels. [JsonProperty(\"height\")] public int? Height { get; set; } Property Value int? Quality Set the quality of the returned image, this is percentage based, default 80 [JsonProperty(\"quality\")] public int Quality { get; set; } Property Value int Resize The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit. [JsonProperty(\"resize\")] public TransformOptions.ResizeType Resize { get; set; } Property Value TransformOptions.ResizeType Width The width of the image in pixels. [JsonProperty(\"width\")] public int? Width { get; set; } Property Value int?"
  },
  "api/Supabase.Storage.UploadSignedUrl.html": {
    "href": "api/Supabase.Storage.UploadSignedUrl.html",
    "title": "Class UploadSignedUrl | storage-csharp",
    "keywords": "Class UploadSignedUrl Namespace Supabase.Storage Assembly Supabase.Storage.dll Represents a Generated Upload Signed Url - can be used to upload a file without needing a logged in token or user. public class UploadSignedUrl Inheritance object UploadSignedUrl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadSignedUrl(Uri, string, string) public UploadSignedUrl(Uri signedUrl, string token, string key) Parameters signedUrl Uri token string key string Properties Key The Key that can be uploaded to (the supabase filename) public string Key { get; } Property Value string SignedUrl The Full Signed Url public Uri SignedUrl { get; } Property Value Uri Token The generated token public string Token { get; } Property Value string"
  },
  "api/Supabase.Storage.html": {
    "href": "api/Supabase.Storage.html",
    "title": "Namespace Supabase.Storage | storage-csharp",
    "keywords": "Namespace Supabase.Storage Classes Bucket BucketUpsertOptions Client ClientOptions Options that can be passed into the Storage Client CreateSignedUrlResponse CreateSignedUrlsResponse ErrorResponse FileObject FileOptions GenericResponse SearchOptions SortBy StorageBucketApi StorageFileApi TransformOptions UploadSignedUrl Represents a Generated Upload Signed Url - can be used to upload a file without needing a logged in token or user. Enums TransformOptions.ResizeType The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height.If the object's aspect ratio does not match the width and height, the image will be stretched to fit."
  },
  "index.html": {
    "href": "index.html",
    "title": "storage-csharp | storage-csharp",
    "keywords": "storage-csharp"
  }
}